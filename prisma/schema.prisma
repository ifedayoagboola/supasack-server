// *** DO NOT EDIT. GENERATED BY PRISMIX. ***
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

/// @seed="npm run db:seed"

model Wallet {
  id                String   @id @default(cuid())
  escrow_balance    Int      @default(0)
  available_balance Int      @default(0)
  ledger_balance    Int      @default(0)
  user_id           String
  user              User     @relation(name: "UserToWallet", fields: [user_id], references: [id])
  store_id          String   @unique
  store             Store    @relation(name: "StoreToWallet", fields: [store_id], references: [id], onDelete: Cascade)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  @@map("wallets")
}

model Advert {
  id           String @id @default(cuid())
  store_name   String
  product_link String
  price        Int
}

model User {
  id                    String                @id @default(cuid())
  wallet                Wallet[]              @relation(name: "UserToWallet")
  user_name             String?
  email                 String                @db.VarChar(256)
  is_email_verified     Boolean               @default(false)
  active                Boolean               @default(true)
  first_name            String
  last_name             String
  mobile                String?
  is_mobile_verified    Boolean?
  sex                   String?
  dob                   String?
  profile_cover_img     String?
  qr_code               String?
  img_url               String?
  password              String
  reset_password_token  String?
  reset_password_expire String?
  token                 String?
  oAuth_token           String?
  oAuth_channel         String?
  refresh_token         String?
  created_at            DateTime              @default(now())
  updated_at            DateTime              @updatedAt
  product               Product[]             @relation(name: "ProductToUser")
  product_variants      ProductVariant[]      @relation(name: "ProductVariantToUser")
  payout_account        PayoutAccount[]       @relation(name: "PayoutAccountToUser")
  store                 Store[]               @relation(name: "StoreToUser")
  store_roles           StoreRole[]           @relation(name: "StoreRoleToUser")
  order                 Order[]               @relation(name: "OrderToUser")
  delivery_information  DeliveryInformation[] @relation(name: "DeliveryInformationToUser")
  address_book          AddressBook[]         @relation(name: "AddressBookToUser")
  Ratings               Ratings[]             @relation(name: "RatingsToUser")
  Comments              Comments[]            @relation(name: "CommentsToUser")
  commentReplies        CommentReplies[]      @relation(name: "CommentRepliesToUser")
  isDeleted             Boolean               @default(false)

  // User roles and permissions
  user_role             UserRole?             @relation(name: "UserToUserRole", fields: [user_role_id], references: [id])
  user_role_id          String?
  permissions           UserPermission[]      @relation(name: "UserToUserPermission")

  @@map("users")
}

model Store {
  id               String           @id @default(cuid())
  wallet           Wallet?          @relation(name: "StoreToWallet")
  product_variants ProductVariant[] @relation(name: "ProductVariantToStore")
  brand_name       String           @unique @db.VarChar(256)
  description      String
  slug             String           @unique
  img_url          String?
  logo             String?
  status           String
  deleted          DateTime?
  user_id          String
  product          Product[]        @relation(name: "ProductToStore")
  user             User             @relation(name: "StoreToUser", fields: [user_id], references: [id])
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  store_role       StoreRole[]      @relation(name: "StoreToStoreRole")
  isDeleted        Boolean          @default(false)

  @@map("stores")
}

model Product {
  id                          String           @id @default(cuid())
  views                       Int              @default(0)
  rating                      Float            @default(0.0)
  name                        String
  description                 String
  slug                        String
  category_id                 String
  user_id                     String
  user                        User             @relation(name: "ProductToUser", fields: [user_id], references: [id])
  status                      String
  store_id                    String
  estimated_delivery_duration Int              @default(3)
  store                       Store            @relation(name: "ProductToStore", fields: [store_id], references: [id])
  product_variants            ProductVariant[] @relation(name: "ProductVariantToProduct")
  isDeleted                   Boolean          @default(false)
  created_at                  DateTime         @default(now())
  updated_at                  DateTime         @updatedAt
  
  // Food-specific fields
  expiry_date                 DateTime?
  is_organic                  Boolean          @default(false)
  is_gluten_free              Boolean          @default(false)
  is_vegan                    Boolean          @default(false)
  is_halal                    Boolean          @default(false)
  is_kosher                   Boolean          @default(false)
  allergens                   String[]
  nutritional_info            Json?
  origin_country              String?
  storage_instructions        String?
  preparation_instructions    String?
  serving_size                String?
  weight_unit                 String?          @default("kg")
  brand                       String?

  @@map("products")
}

model ProductItem {
  id           String   @id @default(cuid())
  product_name String
  description  String
  slug         String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("product_items")
}

model ProductVariant {
  id                    String               @id @default(cuid())
  status                String               @default("ACTIVE")
  color                 String?
  img_urls              String[]
  video_url             String?
  product_variant_specs ProductVariantSpec[] @relation(name: "ProductVariantSpecToProductVariant")
  product_id            String
  product               Product              @relation(name: "ProductVariantToProduct", fields: [product_id], references: [id], onDelete: Cascade)
  store_id              String
  store                 Store                @relation(name: "ProductVariantToStore", fields: [store_id], references: [id], onDelete: Cascade)
  user_id               String
  user                  User                 @relation(name: "ProductVariantToUser", fields: [user_id], references: [id])
  created_at            DateTime             @default(now())
  updated_at            DateTime             @updatedAt

  @@map("product_variants")
}

model ProductVariantSpec {
  id                 String         @id @default(cuid())
  size               String?
  quantity           Int
  amount             Decimal
  product_variant_id String
  product_variant    ProductVariant @relation(name: "ProductVariantSpecToProductVariant", fields: [product_variant_id], references: [id], onDelete: Cascade)

  @@map("product_variant_spec")
}

model StoreRole {
  id         String   @id @default(cuid())
  user_id    String
  user       User     @relation(name: "StoreRoleToUser", fields: [user_id], references: [id])
  store_id   String
  store      Store    @relation(name: "StoreToStoreRole", fields: [store_id], references: [id], onDelete: Cascade)
  role_id    String
  created_by String?
  status     String   @default("ACTIVE")
  role       Role     @relation(name: "RoleToStoreRole", fields: [role_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("store_roles")
}

model Role {
  id         String      @id @default(cuid())
  storeRole  StoreRole[] @relation(name: "RoleToStoreRole")
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  role       String      @unique

  @@map("role")
}

model UserRole {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  level       Int      @default(0) // 0 = lowest, 100 = highest
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  users       User[]   @relation(name: "UserToUserRole")
  permissions UserPermission[] @relation(name: "UserRoleToUserPermission")

  @@map("user_roles")
}

model UserPermission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  resource    String   // e.g., "products", "orders", "users"
  action      String   // e.g., "create", "read", "update", "delete"
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  user_roles  UserRole[] @relation(name: "UserRoleToUserPermission")
  users       User[]     @relation(name: "UserToUserPermission")

  @@map("user_permissions")
}

model Category {
  id         String   @id @default(cuid())
  category   String   @unique
  img_url    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("categories")
}

model PayoutAccount {
  id                  String   @id @default(cuid())
  user_id             String
  user                User     @relation(name: "PayoutAccountToUser", fields: [user_id], references: [id])
  bank_name           String
  bank_account_number String
  account_name        String
  reference           String
  type                String
  status              String
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  @@map("payout_account")
}

model Cart {
  id                      String   @id @default(cuid())
  user_id                 String
  product_id              String
  product_variant_id      String
  product_variant_spec_id String
  store_id                String
  size                    String?
  amount                  Decimal
  color                   String?
  variant_img_url         String
  quantity                Int
  meta                    Json?
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  @@map("cart")
}

model Wishlist {
  id         String   @id @default(cuid())
  user_id    String
  product_id String
  meta       Json?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("wishlist")
}

model Order {
  id                      Int                  @id @default(autoincrement())
  user_id                 String
  user                    User                 @relation(name: "OrderToUser", fields: [user_id], references: [id])
  product_id              String
  product_variant_id      String
  product_variant_spec_id String
  order_reference         String
  store_id                String
  status                  String
  size                    String?
  amount                  Decimal
  color                   String?
  variant_img_url         String
  quantity                Int
  delivery_information    DeliveryInformation? @relation(name: "OrderToDeliveryInformation")
  meta                    Json?
  created_at              DateTime             @default(now())
  updated_at              DateTime             @updatedAt

  @@map("order")
}

model DeliveryInformation {
  id              String @id @default(cuid())
  order           Order  @relation(name: "OrderToDeliveryInformation", fields: [order_id], references: [id])
  order_id        Int    @unique
  order_reference String
  user_id         String
  user            User   @relation(name: "DeliveryInformationToUser", fields: [user_id], references: [id])
  receivers_name  String
  state           String
  city            String
  street          String
  meta            Json?

  @@map("delivery_information")
}

model AddressBook {
  id                       String   @id @default(cuid())
  first_name               String
  last_name                String
  type                     String
  reference                String?
  user_id                  String
  user                     User     @relation(name: "AddressBookToUser", fields: [user_id], references: [id])
  email                    String?
  state                    String
  city                     String
  street                   String
  phone_number             String
  alternative_phone_number String?
  additional_information   String?
  default                  Boolean  @default(false)
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt

  @@map("address_book")
}

model Processor {
  id         String   @id @default(cuid())
  name       String
  type       String
  status     String   @default("ACTIVE")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("processor")
}

model Transactions {
  id           String    @id @default(cuid())
  status       String
  amount       Decimal
  description  String?
  store_id     String?
  user_id      String?
  type         String
  meta         Json?
  completed_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@map("transactions")
}

model Ratings {
  id         String    @id @default(cuid())
  user_id    String
  user       User      @relation(name: "RatingsToUser", fields: [user_id], references: [id])
  rating     Float
  reference  String
  type       String
  comment    Comments? @relation(name: "RatingsToComments")
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@map("ratings")
}

model Comments {
  id            String          @id @default(cuid())
  comment       String
  reference     String
  rating_id     String          @unique
  user_id       String
  user          User            @relation(name: "CommentsToUser", fields: [user_id], references: [id])
  rating        Ratings         @relation(name: "RatingsToComments", fields: [rating_id], references: [id])
  comment_reply CommentReplies? @relation(name: "CommentsToCommentReplies")
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt

  @@map("comments")
}

model CommentReplies {
  id         String   @id @default(cuid())
  comment_id String   @unique
  reference  String
  user_id    String
  reply      String
  user       User     @relation(name: "CommentRepliesToUser", fields: [user_id], references: [id])
  comment    Comments @relation(name: "CommentsToCommentReplies", fields: [comment_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("comment_replies")
}

model Notifications {
  id         String   @id @default(cuid())
  user_id    String
  message    String
  action     String
  reference  String
  type       String
  store_id   String?
  isPublic   Boolean  @default(true)
  isStore    Boolean  @default(true)
  status     String   @default("UNREAD")
  meta       Json?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("notifications")
}

model Waitlist {
  id        String @id @default(cuid())
  full_name String
  email     String
}
